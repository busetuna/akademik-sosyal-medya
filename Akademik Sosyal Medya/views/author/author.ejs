<!DOCTYPE html>
<html lang="tr">
<head>
  <meta charset="UTF-8">
  <title><%= title %></title>
  <link rel="stylesheet" href="/css/partials/navbar.css">
  <link rel="stylesheet" href="/css/author/author.css">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

  <style>
    * {
      font-family: 'Inter', sans-serif;
      box-sizing: border-box;
    }

    body {
      background: linear-gradient(to right, #e3f2fd, #e8eaf6);
      margin: 0;
      padding: 0;
    }

    .author-page {
      max-width: 1200px;
      margin: auto;
      padding: 40px 20px;
      display: flex;
      gap: 30px;
    }

    .author-left, .author-right {
      background: #fff;
      padding: 20px;
      border-radius: 16px;
      box-shadow: 0 8px 24px rgba(0,0,0,0.08);
    }

    .author-left {
      flex: 2;
    }

    .author-right {
      flex: 1;
    }

    .author-header {
      display: flex;
      gap: 20px;
      margin-bottom: 20px;
    }
.upload-btn {
  display: inline-block;
  background: #20c997;
  color: white;
  padding: 10px 20px;
  border-radius: 8px;
  text-decoration: none;
  font-weight: 600;
  margin-top: 20px;
  transition: background 0.3s ease;
}

.upload-btn:hover {
  background: #12b886;
}

    .author-photo img {
      width: 80px;
      height: 80px;
      border-radius: 50%;
      object-fit: cover;
      border: 3px solid #4c6ef5;
    }

    .author-info h2 {
      margin: 0;
      font-size: 24px;
      color: #333;
    }

    .author-info p {
      margin: 5px 0;
      color: #666;
      font-size: 14px;
    }

    .author-tags span {
      background: #e3f2fd;
      padding: 4px 10px;
      border-radius: 20px;
      font-size: 12px;
      margin-right: 6px;
      color: #1e88e5;
    }

    .article-table {
      margin-top: 20px;
      border-top: 1px solid #ccc;
    }

    .article-row {
      display: grid;
      grid-template-columns: 1fr 80px 60px;
      padding: 10px 0;
      align-items: center;
      border-bottom: 1px solid #eee;
    }

    .article-header {
      font-weight: 600;
      background: #f1f3f5;
      padding: 10px 0;
      border-radius: 8px 8px 0 0;
    }

    .article-title a {
      color: #1e88e5;
      text-decoration: none;
      font-weight: 500;
    }

    .article-meta {
      font-size: 12px;
      color: #888;
      margin-top: 4px;
    }

    .compare-section textarea {
      font-size: 14px;
      width: 100%;
      border: 1px solid #ddd;
      border-radius: 8px;
      padding: 10px;
      margin-top: 10px;
      resize: vertical;
    }

    #compareSelected, .compare-section button {
      background: #4c6ef5;
      color: white;
      padding: 12px 20px;
      border: none;
      border-radius: 8px;
      margin-top: 15px;
      font-weight: 600;
      cursor: pointer;
      transition: background 0.3s;
    }

    #compareSelected:disabled {
      background: #9aa0ac;
      cursor: not-allowed;
    }

    #compareSelected:hover:not(:disabled), .compare-section button:hover {
      background: #3b5bdb;
    }

    .citation-box {
      background: #fafafa;
      padding: 15px;
      border-radius: 10px;
    }

    .citation-box h4 {
      margin-bottom: 10px;
      color: #333;
    }

    .citation-box table {
      width: 100%;
      border-collapse: collapse;
    }

    .citation-box th, .citation-box td {
      padding: 8px;
      text-align: left;
      font-size: 13px;
    }

    .citation-box th {
      background: #f0f0f0;
    }

    .citation-box canvas {
      margin-top: 20px;
    }

    .abstract-refresh-notice {
      background: #e6ffed;
      border: 1px solid #b2f2bb;
      color: #2b8a3e;
      border-radius: 6px;
      padding: 10px 14px;
      margin-top: 16px;
      font-size: 14px;
    }
  </style>
</head>
<body>
  <div class="author-page">
    <div class="author-layout">

      <!-- Sol Kƒ±sƒ±m -->
      <div class="author-left">
        <div class="author-header">
          <div class="author-photo">
            <img src="<%= author.thumbnail || 'https://via.placeholder.com/80?text=üë§' %>" alt="Yazar Fotoƒürafƒ±">
          </div>
          <div class="author-info">
            <h2><%= author.name %></h2>
            <p><%= author.affiliations || 'Affiliation bilgisi yok' %></p>
            <p><%= author.email || 'E-posta bilgisi yok' %></p>
            <div class="author-tags">
              <% if (author.interests && author.interests.length > 0) { %>
                <% author.interests.forEach(tag => { %>
                  <span><%= tag %></span>
                <% }) %>
              <% } else { %>
                <span>Alan belirtilmemi≈ü</span>
              <% } %>
            </div>
          </div>
        </div>

        <!-- Makale Listesi -->
        <div class="article-table">
          <div class="article-row article-header">
            <div class="article-title">SE√á / BA≈ûLIK</div>
            <div class="article-cited">ALINTI</div>
            <div class="article-year">YIL</div>
          </div>

          <% if (articles && articles.length > 0) { %>
            <% articles.forEach((article, index) => { %>
              <div class="article-row" data-article-index="<%= index %>">
                <div class="article-title">
  <input type="checkbox"
         class="compare-checkbox"
         id="chk-<%= index %>"
         data-title="<%= article.title %>"
         data-abstract="<%= article.abstract || '√ñzet bilgisi yok' %>">

  <label for="chk-<%= index %>">Makale Se√ß</label>

  <a href="<%= article.link || '#' %>" target="_blank"><%= article.title %></a>

  <div class="article-meta">
    <%= article.authors || '' %><br>
    <span class="journal"><%= article.publication || 'Yayƒ±n bilgisi yok' %></span>
  </div>
</div>

                <div class="article-cited"><%= article.cited_by && article.cited_by.value ? article.cited_by.value : 0 %></div>
                <div class="article-year"><%= article.year || '-' %></div>
              </div>
            <% }) %>
          <% } else { %>
            <div class="no-articles">Bu yazara ait makale bulunamadƒ±.</div>
          <% } %>
        </div>

        <!-- Kar≈üƒ±la≈ütƒ±rma B√∂l√ºm√º -->
        <% if (articles && articles.length > 0) { %>
        <div class="compare-section">
          <h3>üìã Makale Kar≈üƒ±la≈ütƒ±rmasƒ±</h3>
          
          <label for="myAbstract"><strong>Kendi √ñzetiniz:</strong></label>
          <textarea id="myAbstract" placeholder="Kendi √∂zetinizi buraya yazƒ±n..."></textarea>
          
          <div class="selection-info">
            <span id="selectionCount">0</span> makale se√ßildi
          </div>
          
          <button id="compareSelected" disabled>
            üîç Se√ßilenleri Kar≈üƒ±la≈ütƒ±r
          </button>
        </div>
        <% } %>
      </div>

      <!-- Saƒü Kƒ±sƒ±m -->
      <div class="author-right">
        <div class="citation-box">
          <h4>Alƒ±ntƒ± Yapanlar</h4>
          <table>
            <thead>
              <tr><th></th><th>Toplam</th><th>2020+</th></tr>
            </thead>
            <tbody>
              <tr>
                <td>Alƒ±ntƒ±</td>
                <td><%= citations && citations.table && citations.table.citations && citations.table.citations.all ? citations.table.citations.all : 0 %></td>
                <td><%= citations && citations.table && citations.table.citations && citations.table.citations.since_2020 ? citations.table.citations.since_2020 : 0 %></td>
              </tr>
              <tr>
                <td>h-endeks</td>
                <td><%= citations && citations.table && citations.table.h_index && citations.table.h_index.all ? citations.table.h_index.all : 0 %></td>
                <td><%= citations && citations.table && citations.table.h_index && citations.table.h_index.since_2020 ? citations.table.h_index.since_2020 : 0 %></td>
              </tr>
              <tr>
                <td>i10-endeks</td>
                <td><%= citations && citations.table && citations.table.i10_index && citations.table.i10_index.all ? citations.table.i10_index.all : 0 %></td>
                <td><%= citations && citations.table && citations.table.i10_index && citations.table.i10_index.since_2020 ? citations.table.i10_index.since_2020 : 0 %></td>
              </tr>
            </tbody>
          </table>
          <canvas id="citationChart" width="100%" height="100"></canvas>
          <a href="/upload" class="upload-btn">üì§ PDF Y√ºkle ve Kar≈üƒ±la≈ütƒ±r</a>

        </div>
      </div>

    </div>
  </div>

  <script>
    // Author sayfasƒ±na abstract √ßekme butonu ekle
function addAbstractButtons() {
  const articleRows = document.querySelectorAll('.article-row:not(.article-header)');
  
  articleRows.forEach((row, index) => {
    const titleDiv = row.querySelector('.article-title');
    const link = titleDiv.querySelector('a');
    
    if (link && link.href) {
      // Abstract refresh butonu olu≈ütur
      const refreshBtn = document.createElement('button');
      refreshBtn.className = 'refresh-abstract-btn';
      refreshBtn.innerHTML = 'üîÑ √ñzet √áek';
      refreshBtn.style.cssText = `
        margin-left: 10px; padding: 5px 10px; font-size: 12px;
        background: #4c6ef5; color: white; border: none; border-radius: 4px;
        cursor: pointer; transition: background 0.3s;
      `;
      
      refreshBtn.addEventListener('click', async (e) => {
        e.preventDefault();
        await fetchAbstractForArticle(link.href, index, refreshBtn);
      });
      
      // Butonu makale ba≈ülƒ±ƒüƒ±nƒ±n yanƒ±na ekle
      titleDiv.appendChild(refreshBtn);
    }
  });
}

// Tek makale i√ßin abstract √ßekme
async function fetchAbstractForArticle(url, index, button) {
  const originalText = button.innerHTML;
  button.innerHTML = '‚è≥ √áekiliyor...';
  button.disabled = true;
  
  try {
    const response = await fetch('/get-abstract', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ url: url })
    });
    
    const data = await response.json();
    
    if (data.success && data.abstract) {
      // Checkbox'ƒ±n data-abstract √∂zelliƒüini g√ºncelle
      const checkbox = document.querySelector(`#chk-${index}`);
      if (checkbox) {
        checkbox.setAttribute('data-abstract', data.abstract);
      }
      
      // G√∂rsel feedback
      button.innerHTML = '‚úÖ √áekildi';
      button.style.background = '#28a745';
      
      // √ñzet bilgisini g√∂ster
      showAbstractPreview(data.abstract, button);
      
    } else {
      button.innerHTML = '‚ùå Ba≈üarƒ±sƒ±z';
      button.style.background = '#dc3545';
      console.error('Abstract √ßekilemedi:', data.message);
    }
    
  } catch (error) {
    button.innerHTML = '‚ùå Hata';
    button.style.background = '#dc3545';
    console.error('Abstract √ßekme hatasƒ±:', error);
  } finally {
    // 3 saniye sonra butonu eski haline getir
    setTimeout(() => {
      button.innerHTML = originalText;
      button.style.background = '#4c6ef5';
      button.disabled = false;
    }, 3000);
  }
}

// Abstract √∂nizlemesi g√∂ster
function showAbstractPreview(abstract, button) {
  // Mevcut √∂nizlemeyi kaldƒ±r
  const existingPreview = button.parentNode.querySelector('.abstract-preview');
  if (existingPreview) {
    existingPreview.remove();
  }
  
  // Yeni √∂nizleme olu≈ütur
  const preview = document.createElement('div');
  preview.className = 'abstract-preview';
  preview.style.cssText = `
    margin-top: 10px; padding: 10px; background: #f8f9fa;
    border: 1px solid #dee2e6; border-radius: 4px;
    font-size: 13px; line-height: 1.4; max-height: 100px;
    overflow-y: auto; position: relative;
  `;
  
  // Kapat butonu
  const closeBtn = document.createElement('button');
  closeBtn.innerHTML = '√ó';
  closeBtn.style.cssText = `
    position: absolute; top: 5px; right: 5px;
    background: none; border: none; font-size: 16px;
    cursor: pointer; color: #666;
  `;
  closeBtn.onclick = () => preview.remove();
  
  // Abstract metnini kƒ±salt
  const shortAbstract = abstract.length > 300 ? 
    abstract.substring(0, 300) + '...' : abstract;
  
  preview.innerHTML = `
    <strong>√ñzet:</strong><br>
    ${shortAbstract}
  `;
  preview.appendChild(closeBtn);
  
  // √ñnizlemeyi butona ekle
  button.parentNode.appendChild(preview);
}

// T√ºm makaleler i√ßin toplu abstract √ßekme
async function fetchAllAbstracts() {
  const articles = [];
  const articleRows = document.querySelectorAll('.article-row:not(.article-header)');
  
  articleRows.forEach((row) => {
    const titleDiv = row.querySelector('.article-title');
    const link = titleDiv.querySelector('a');
    const title = link ? link.textContent.trim() : '';
    
    if (link && link.href) {
      articles.push({
        title: title,
        link: link.href
      });
    }
  });
  
  if (articles.length === 0) {
    alert('√áekilecek makale bulunamadƒ±!');
    return;
  }
  
  // Loading g√∂ster
  const loadingDiv = document.createElement('div');
  loadingDiv.className = 'bulk-loading';
  loadingDiv.style.cssText = `
    position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
    background: white; padding: 20px; border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0,0,0,0.1); z-index: 1000;
    text-align: center;
  `;
  loadingDiv.innerHTML = `
    <div style="font-size: 18px; margin-bottom: 10px;">üìÑ √ñzetler √ßekiliyor...</div>
    <div class="progress-text">0 / ${articles.length} makale i≈ülendi</div>
    <div style="margin-top: 10px; font-size: 12px; color: #666;">
      Bu i≈ülem birka√ß dakika s√ºrebilir
    </div>
  `;
  document.body.appendChild(loadingDiv);
  
  try {
    const response = await fetch('/api/scholar/update-abstracts', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ articles: articles })
    });
    
    const data = await response.json();
    
    if (data.success) {
      // Checkbox'larƒ± g√ºncelle
      data.articles.forEach((article, index) => {
        const checkbox = document.querySelector(`#chk-${index}`);
        if (checkbox && article.abstract) {
          checkbox.setAttribute('data-abstract', article.abstract);
        }
      });
      
      alert(`‚úÖ ${data.articles.length} makale ba≈üarƒ±yla g√ºncellendi!`);
    } else {
      alert('‚ùå √ñzetler √ßekilemedi: ' + data.message);
    }
    
  } catch (error) {
    console.error('Toplu abstract √ßekme hatasƒ±:', error);
    alert('‚ùå Sunucu hatasƒ± olu≈ütu');
  } finally {
    loadingDiv.remove();
  }
}

// Sayfa y√ºklendiƒüinde abstract butonlarƒ±nƒ± ekle
document.addEventListener('DOMContentLoaded', () => {
  // Tek tek abstract √ßekme butonlarƒ±
  addAbstractButtons();
  
  // Toplu abstract √ßekme butonu
  const compareSection = document.querySelector('.compare-section');
  if (compareSection) {
    const bulkBtn = document.createElement('button');
    bulkBtn.innerHTML = 'üìÑ T√ºm √ñzetleri √áek';
    bulkBtn.style.cssText = `
      background: #17a2b8; color: white; padding: 10px 20px;
      border: none; border-radius: 6px; cursor: pointer;
      font-size: 14px; margin-top: 10px; margin-right: 10px;
    `;
    bulkBtn.onclick = fetchAllAbstracts;
    
    compareSection.appendChild(bulkBtn);
  }
});

// Abstract refresh bildirimi
function showAbstractRefreshNotice() {
  const notice = document.createElement('div');
  notice.className = 'abstract-refresh-notice';
  notice.style.cssText = `
    background: #d4edda; color: #155724; padding: 10px;
    border: 1px solid #c3e6cb; border-radius: 4px;
    margin: 10px 0; font-size: 14px;
  `;
  notice.innerHTML = `
    <strong>üí° ƒ∞pucu:</strong> Makalelerin √∂zetlerini √ßekmek i√ßin yanlarƒ±ndaki 
    "üîÑ √ñzet √áek" butonlarƒ±nƒ± kullanƒ±n veya "üìÑ T√ºm √ñzetleri √áek" ile 
    toplu olarak √ßekin.
  `;
  
  // Author header'ƒ±ndan sonra ekle
  const authorHeader = document.querySelector('.author-header');
  if (authorHeader) {
    authorHeader.parentNode.insertBefore(notice, authorHeader.nextSibling);
  }
}

// Sayfa y√ºklendiƒüinde bildirimi g√∂ster
document.addEventListener('DOMContentLoaded', () => {
  showAbstractRefreshNotice();
});
    // Grafik olu≈üturma - dinamik verilerle
    const ctx = document.getElementById('citationChart').getContext('2d');
    const chartData = JSON.parse('<%- JSON.stringify(citations && citations.graph ? citations.graph : { values: [] }) %>');


    if (chartData.values && chartData.values.length) {
      new Chart(ctx, {
        type: 'bar',
        data: {
          labels: chartData.values.map(d => d.year),
          datasets: [{
            label: 'Alƒ±ntƒ± Sayƒ±sƒ±',
            data: chartData.values.map(d => d.citations),
            backgroundColor: '#4c6ef5'
          }]
        },
        options: {
          responsive: true,
          scales: {
            y: { beginAtZero: true }
          }
        }
      });
    } else {
      // Grafik verisi yoksa placeholder g√∂ster
      ctx.fillStyle = '#f8f9fa';
      ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);
      ctx.fillStyle = '#6c757d';
      ctx.font = '14px Arial';
      ctx.textAlign = 'center';
      ctx.fillText('Grafik verisi bulunamadƒ±', ctx.canvas.width / 2, ctx.canvas.height / 2);
    }

    // Checkbox ve kar≈üƒ±la≈ütƒ±rma sistemi
    document.addEventListener('DOMContentLoaded', () => {
      const checkboxes = document.querySelectorAll('.compare-checkbox');
      const compareBtn = document.getElementById('compareSelected');
      const myAbstractInput = document.getElementById('myAbstract');
      const selectionCount = document.getElementById('selectionCount');

      // Eƒüer kar≈üƒ±la≈ütƒ±rma b√∂l√ºm√º yoksa (makale yoksa) scripti √ßalƒ±≈ütƒ±rma
      if (!compareBtn || !myAbstractInput || !selectionCount) {
        return;
      }

      // Debug: Checkbox sayƒ±sƒ±nƒ± kontrol et
      console.log('Bulunan checkbox sayƒ±sƒ±:', checkboxes.length);

      function updateButtonState() {
        const checkedBoxes = Array.from(checkboxes).filter(cb => cb.checked);
        const hasMyAbstract = myAbstractInput.value.trim().length > 0;
        
        // Debug: Se√ßili checkbox sayƒ±sƒ±nƒ± logla
        console.log('Se√ßili checkbox sayƒ±sƒ±:', checkedBoxes.length);
        
        // Se√ßim sayƒ±sƒ±nƒ± g√ºncelle
        selectionCount.textContent = checkedBoxes.length;
        
        // Butonu etkinle≈ütir/devre dƒ±≈üƒ± bƒ±rak
        compareBtn.disabled = !(checkedBoxes.length > 0 && hasMyAbstract);
      }

      // Event listener'larƒ± ekle
      checkboxes.forEach((cb, index) => {
        console.log(`Checkbox ${index} i√ßin event listener ekleniyor`);
        cb.addEventListener('change', (e) => {
          console.log(`Checkbox ${index} deƒüi≈üti:`, e.target.checked);
          updateButtonState();
        });
      });
      
      myAbstractInput.addEventListener('input', updateButtonState);

      // Kar≈üƒ±la≈ütƒ±rma butonu tƒ±klama olayƒ±
      compareBtn.addEventListener('click', async () => {
        const myAbstract = myAbstractInput.value.trim();
        if (!myAbstract) {
          alert('L√ºtfen kendi √∂zetinizi girin!');
          return;
        }

        const selectedAbstracts = Array.from(checkboxes)
          .filter(cb => cb.checked)
          .map(cb => {
            const abstract = cb.dataset.abstract;
            const title = cb.dataset.title;
            // Abstract yoksa veya √ßok kƒ±sa ise uyarƒ± ver
            if (!abstract || abstract === '√ñzet bilgisi yok' || abstract.length < 20) {
              console.warn(`Makale "${title}" i√ßin yeterli abstract bilgisi yok`);
              return null;
            }
            return abstract;
          })
          .filter(abs => abs !== null);

        if (selectedAbstracts.length === 0) {
          alert('Se√ßilen makalelerin hi√ßbirinde yeterli abstract bilgisi yok. L√ºtfen abstract\'ƒ± bulunan makaleler se√ßin.');
          return;
        }

        // Kar≈üƒ±la≈ütƒ±rma i≈ülemi
        compareBtn.disabled = true;
        compareBtn.textContent = '‚è≥ Kar≈üƒ±la≈ütƒ±rƒ±lƒ±yor...';

        try {
          const response = await fetch('/api/compare', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
              myAbstract: myAbstract, 
              compareAbstracts: selectedAbstracts 
            }),
          });

          const data = await response.json();
          
          if (data.result) {
            // Sonucu g√∂ster
            alert("Kar≈üƒ±la≈ütƒ±rma Sonucu:\n\n" + data.result);
            
            if (data.warning) {
              console.warn("Uyarƒ±:", data.warning);
            }
          } else {
            alert("Kar≈üƒ±la≈ütƒ±rma yapƒ±lamadƒ±. L√ºtfen tekrar deneyin.");
          }
        } catch (error) {
          console.error('Kar≈üƒ±la≈ütƒ±rma hatasƒ±:', error);
          alert("Sunucu ile ileti≈üimde hata olu≈ütu. L√ºtfen tekrar deneyin.");
        } finally {
          compareBtn.disabled = false;
          compareBtn.textContent = 'üîç Se√ßilenleri Kar≈üƒ±la≈ütƒ±r';
          updateButtonState(); // Buton durumunu yeniden kontrol et
        }
      });

      // Sayfa y√ºklendiƒüinde buton durumunu ayarla
      updateButtonState();
    });
  </script>
</body>
</html>